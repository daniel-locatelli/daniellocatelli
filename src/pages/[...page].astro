---
import Layout from "../layouts/Layout.astro";
import {
  SITE_TITLE,
  SITE_DESCRIPTION,
  SITE_HEROIMAGE,
  SITE_HEROIMAGEALT,
} from "../consts";
import { getAllBlocksByBlockId, getAllDatabases } from "../lib/notion/client";
import type { Page } from "../lib/notion-interfaces";
import Nav from "../components/Nav.astro";
import PostBody from "../components/Notion/PostBody.astro";
import { importCoverImage } from "../lib/blog-helpers";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const databases = await getAllDatabases();
  const paths = databases.flatMap((database) =>
    // The main pages are in the other file
    database.Pages.filter((page) => database.Title === "Pages").map((page) => ({
      params: {
        page: page.Slug === "home" ? undefined : page.Slug,
      },
      props: { page: page },
    }))
  );
  return paths;
}

interface Props {
  page: Page;
}

const { page: slug } = Astro.params;
const { page } = Astro.props;

const [blocks] = await Promise.all([getAllBlocksByBlockId(page.PageId)]);

// Getting images dynamically with import.meta.glob()
// It only accepts string literals
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/notion/**/*.{jpeg,jpg,png,tiff,webp,gif,svg,avif}"
);

// Cover image
const image = await importCoverImage(page, images);
---

<Layout
  title={SITE_TITLE}
  description={SITE_DESCRIPTION}
  image={SITE_HEROIMAGE}
  imageAlt={SITE_HEROIMAGEALT}
>
  <Nav />
  <main>
    <h1 title="Daniel Nunes Locatelli is my full names">Daniel Locatelli</h1>

    <div class="card">
      <div class="card-text">
        <h3 class="name" transition:name={page.Slug + "-title"}>
          {page.Name}
        </h3>
        <p class="description">{page.Description_en}</p>
        {/* <p class="date">{formatDate(new Date(page.DateStart!))}</p> */}
      </div>
      {
        (
          <div>
            {image && (
              <Image
                class="cover"
                transition:name={page.Slug + "-image"}
                src={image}
                alt={page.CoverAlt}
                widths={[300, 400, 500]}
                sizes={
                  "(max-width: 300px) 300px, (max-width: 400px) 400px, (max-width: 500px) 500px"
                }
              />
            )}
          </div>
        )
      }
    </div>
    <PostBody blocks={blocks} slug={slug!} />
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1rem;
    width: 800px;
    max-width: calc(100% - 2rem);
    color: white;
    font-size: 20px;
    line-height: 1.6;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 2rem;
    padding: 0;
  }
  .cover-image {
    -webkit-mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 90%,
      rgba(0, 0, 0, 0)
    );
    mask-image: linear-gradient(
      to bottom,
      rgba(0, 0, 0, 1) 90%,
      rgba(0, 0, 0, 0)
    );
  }
</style>
