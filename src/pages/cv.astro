---
import Base from "@/layouts/Base.astro";
import profilePhoto from "@/assets/daniel-locatelli-v1.png";
import { Image } from "astro:assets";
import Container from "@/components/Container.astro";
import {
  AlfredReinWorks,
  ArtEngineeringWorks,
  BuildSystemsWorks,
  db,
  EducationItems,
  eq,
  Experience,
  ExperienceItems,
  SkillDatabases,
  SkillDesign,
  SkillFrameworks,
  SkillProgramming,
  SkillSpecialized,
  Summary,
} from "astro:db";
import { Education } from "astro:db";
import { Scholarships } from "astro:db";
import { Publications } from "astro:db";
import { PersonToPublications } from "astro:db";
import { Certifications } from "astro:db";
import { Tutoring } from "astro:db";
import { TalksAndLectures } from "astro:db";
import { CoursesAttended } from "astro:db";
import { FreelanceWorks } from "astro:db";
import { IcdItkeWorks } from "astro:db";
import { MarkoBrajovicWorks } from "astro:db";
import { Icon } from "astro-icon/components";

const getMonthYear = (date: Date): string => {
  const month =
    date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;
  const year = date.getFullYear();
  return `${month}.${year}`;
};

const skillProgramming = await db
  .select()
  .from(SkillProgramming)
  .where(eq(SkillProgramming.locale, "en"));
const skillFrameworks = await db
  .select()
  .from(SkillFrameworks)
  .where(eq(SkillFrameworks.locale, "en"));
const skillDatabases = await db
  .select()
  .from(SkillDatabases)
  .where(eq(SkillDatabases.locale, "en"));
const skillDesign = await db
  .select()
  .from(SkillDesign)
  .where(eq(SkillDesign.locale, "en"));
const skillSpecialized = await db
  .select()
  .from(SkillSpecialized)
  .where(eq(SkillSpecialized.locale, "en"));
const summary = await db
  .selectDistinct({ text: Summary.text })
  .from(Summary)
  .where(eq(Summary.locale, "en"));

const experience = await db
  .select()
  .from(Experience)
  .where(eq(Experience.locale, "en"));

const itemsByExperienceId = await Promise.all(
  experience.map(async ({ id }) => {
    const items = await db
      .select()
      .from(ExperienceItems)
      .where(eq(ExperienceItems.experienceId, id));
    return { id, items: items };
  })
);

const education = await db
  .select()
  .from(Education)
  .where(eq(Education.locale, "en"));

const itemsByEducationId = await Promise.all(
  education.map(async ({ id }) => {
    const items = await db
      .select()
      .from(EducationItems)
      .where(eq(EducationItems.educationId, id));
    return { id, items: items };
  })
);

const scholarships = await db
  .select()
  .from(Scholarships)
  .where(eq(Scholarships.locale, "en"));

const publications = await db
  .select()
  .from(Publications)
  .where(eq(Publications.locale, "en"));

const personByPublicationId = await Promise.all(
  publications.map(async ({ id }) => {
    const items = await db
      .select()
      .from(PersonToPublications)
      .where(eq(PersonToPublications.publicationId, id));
    return { id, items: items };
  })
);

const certifications = await db
  .select()
  .from(Certifications)
  .where(eq(Certifications.locale, "en"));

const tutoring = await db
  .select()
  .from(Tutoring)
  .where(eq(Tutoring.locale, "en"));

const talksAndLectures = await db
  .select()
  .from(TalksAndLectures)
  .where(eq(TalksAndLectures.locale, "en"));

const coursesAttended = await db
  .select()
  .from(CoursesAttended)
  .where(eq(CoursesAttended.locale, "en"));

const freelanceWorks = await db
  .select()
  .from(FreelanceWorks)
  .where(eq(FreelanceWorks.locale, "en"));

const buildSystemsWorks = await db
  .select()
  .from(BuildSystemsWorks)
  .where(eq(BuildSystemsWorks.locale, "en"));

const artEngineeringWorks = await db
  .select()
  .from(ArtEngineeringWorks)
  .where(eq(ArtEngineeringWorks.locale, "en"));

const alfredReinWorks = await db
  .select()
  .from(AlfredReinWorks)
  .where(eq(AlfredReinWorks.locale, "en"));

const icdItkeWorks = await db
  .select()
  .from(IcdItkeWorks)
  .where(eq(IcdItkeWorks.locale, "en"));

const markoBrajovicWorks = await db
  .select()
  .from(MarkoBrajovicWorks)
  .where(eq(MarkoBrajovicWorks.locale, "en"));
---

<Base
  meta={{
    title: "CV",
    description:
      "This is my full CV, including work, education, lectures, publications, certificates, and more.",
    coverAlt: "Daniel Locatelli's profile photo.",
    coverImage: "@/assets/daniel-locatelli.png",
    locale: "en",
    slug: "cv",
  }}
>
  <Container
    class="font-body relative flex flex-col gap-4 text-base print:gap-2 print:text-sm print:text-black [&_.item-text]:px-6 [&_.item-text]:py-4 [&_.item-text]:print:break-inside-avoid [&_.item-text]:print:px-2 [&_.item-text]:print:py-1 [&_.timeline]:shrink-0 [&_.timeline]:grow [&_.timeline]:border-r [&_.timeline]:print:h-2 [&_.timeline-top]:h-[17px] [&_.timeline-top]:border-r [&_.timeline-top]:print:h-3 [&_.timeline-wrapper]:mx-3 [&_.timeline-wrapper]:flex [&_.timeline-wrapper]:shrink-0 [&_.timeline-wrapper]:flex-col [&_.timeline-wrapper]:items-center [&_.timeline-wrapper]:font-sans [&_.timeline-wrapper]:sm:mx-6 hover:[&_a]:text-emerald-400 [&_h2]:mb-3 [&_h2]:border-b [&_h2]:pb-1 [&_h2]:text-3xl [&_h2]:print:mb-1 [&_h2]:print:break-after-avoid [&_h3]:text-lg [&_h4]:text-lg [&_h4]:text-zinc-400"
  >
    <div class="flex flex-col gap-6 pt-20 sm:flex-row sm:pt-28 print:pt-2">
      <Image
        src={profilePhoto}
        alt="Daniel Locatelli's profile photo."
        class="rounded-full sm:size-36"
      />
      <div class="flex flex-col justify-center gap-2">
        <div class="flex flex-col gap-2">
          <h1 class="font-title text-5xl">Daniel Locatelli</h1>
          <p class="text-xl">AECO Software developer</p>
        </div>
        <div class="flex flex-col gap-5 text-sm sm:flex-row">
          <p class="text-pretty sm:text-xs sm:text-balance">
            "Architecture is a transdisciplinary field, its future lies in using
            computational, co-designed techniques combined with vernacular
            eco-friendly materials".
          </p>
          <address class="flex flex-col sm:text-xs">
            <a href="mailto:architect.locatelli@gmail.com"
              >architect.locatelli@gmail.com</a
            >
            <span> +49 178 324-0834 </span>
            <span> Munich, Germany </span>
          </address>
        </div>
      </div>
    </div>
    <section id="summary">
      <h2>Summary</h2>
      <p class="text-pretty">{summary[0].text}</p>
    </section>
    <section id="technical-skills">
      <h2>Technical Skills</h2>
      <table
        class="table-auto [&_td]:leading-5 [&_th]:pr-2 [&_th]:text-right [&_th]:align-top sm:[&_th]:pr-4"
      >
        <tr>
          <th>Programming</th>
          <td>
            {
              skillProgramming.map(({ id, name }) =>
                id === skillProgramming.length ? `${name}` : `${name}, `
              )
            }
          </td>
        </tr>
        <tr>
          <th>Frameworks</th>
          <td>
            {
              skillFrameworks.map(({ id, name }) =>
                id === skillFrameworks.length ? `${name}` : `${name}, `
              )
            }
          </td>
        </tr>
        <tr>
          <th>Databases</th>
          <td>
            {
              skillDatabases.map(({ id, name }) =>
                id === skillDatabases.length ? `${name}` : `${name}, `
              )
            }
          </td>
        </tr>
        <tr>
          <th>Design Tools</th>
          <td>
            {
              skillDesign.map(({ id, name }) =>
                id === skillDesign.length ? `${name}` : `${name}, `
              )
            }
          </td>
        </tr>
        <tr>
          <th>Specialized Skills</th>
          <td>
            {
              skillSpecialized.map(({ id, name }) =>
                id === skillSpecialized.length ? `${name}` : `${name}, `
              )
            }
          </td>
        </tr>
      </table>
    </section>
    <section
      id="work-experience"
      class="[&_li]:text-pretty [&_ul]:list-disc [&_ul]:pl-4 [&_ul]:text-sm [&_ul]:text-zinc-400"
    >
      <h2>Work Experience</h2>
      {
        experience.map(
          async ({
            id,
            startDate,
            endDate,
            title,
            company,
            companyNote,
            location,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={endDate.toDateString()}>
                  {getMonthYear(endDate)}
                </time>
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {company} | {location}
                  </h4>
                  {companyNote ? (
                    <p class="mb-1 ml-1 text-xs text-zinc-400">
                      <sup>â¤·</sup>
                      {companyNote}
                    </p>
                  ) : (
                    ""
                  )}
                  <ul>
                    {itemsByExperienceId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    <a href={link}>{company}</a> | {location}
                  </h4>
                  {companyNote ? (
                    <p class="mb-1 ml-1 text-xs text-zinc-400">
                      <sup>â¤·</sup>
                      {companyNote}
                    </p>
                  ) : (
                    ""
                  )}
                  <ul>
                    {itemsByExperienceId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section
      id="education"
      class="[&_li]:text-pretty [&_ul]:list-disc [&_ul]:pl-4 [&_ul]:text-sm [&_ul]:text-zinc-400"
    >
      <h2>Education</h2>
      {
        education.map(
          async ({
            id,
            startDate,
            endDate,
            title,
            institution,
            location,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={endDate.toDateString()}>
                  {getMonthYear(endDate)}
                </time>
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {institution} | {location}
                  </h4>
                  <ul>
                    {itemsByEducationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    <a href={link}>{institution}</a> | {location}
                  </h4>
                  <ul>
                    {itemsByEducationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="scholarships">
      <h2>Scholarships</h2>
      {
        scholarships.map(
          async ({
            startDate,
            endDate,
            title,
            institution,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={endDate.toDateString()}>
                  {getMonthYear(endDate)}
                </time>
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>{institution}</h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">
                    <a href={link}>{title}</a>
                  </h3>
                  <h4>{institution}</h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="publications">
      <h2>Publications</h2>
      {
        publications.map(
          async ({ id, date, title, publisher, location, link }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={date.toDateString()}>{getMonthYear(date)}</time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {publisher}
                    {location ? `| ${location}` : ""}
                  </h4>
                  <p class="flex flex-wrap text-sm text-zinc-400">
                    {personByPublicationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item, index, array) => (
                        <span class="mr-1 text-nowrap">
                          {index + 1 === array.length
                            ? item.personId
                            : `${item.personId}, `}
                        </span>
                      ))}
                  </p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">
                    <a href={link}>{title}</a>
                  </h3>
                  <h4>
                    {publisher}
                    {location ? `| ${location}` : ""}
                  </h4>
                  <p class="flex flex-wrap text-sm text-zinc-400">
                    {personByPublicationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item, index, array) => (
                        <span class="mr-1 text-nowrap">
                          {index + 1 === array.length
                            ? item.personId
                            : `${item.personId}, `}
                        </span>
                      ))}
                  </p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="certifications">
      <h2>Certifications</h2>
      {
        certifications.map(async ({ date, title, issuer, location, link }) => (
          <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
            <div class="timeline-wrapper">
              <div class="timeline-top" />
              <time datetime={date.toDateString()}>{getMonthYear(date)}</time>
              <div class="timeline" />
            </div>
            {link ? (
              <a
                href={link}
                class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
              >
                <h3 class="mb-0 flex">
                  <span class="grow">{title} </span>
                  <Icon
                    name="mdi:external-link"
                    class="mt-2 size-3 shrink-0 print:hidden"
                  />
                </h3>
                <h4>
                  {issuer}
                  {location ? `| ${location}` : ""}
                </h4>
              </a>
            ) : (
              <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                <h3 class="mb-0">{title}</h3>
                <h4>
                  {issuer}
                  {location ? `| ${location}` : ""}
                </h4>
              </div>
            )}
          </div>
        ))
      }
    </section>
    <section id="tutoring">
      <h2>Tutoring</h2>
      {
        tutoring.map(
          async ({
            startDate,
            endDate,
            title,
            organization,
            location,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {organization} | {location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {organization} | {location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="talks-and-lectures">
      <h2>Talks and Lectures</h2>
      {
        talksAndLectures.map(
          async ({ date, title, organization, location, link }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={date.toDateString()}>{getMonthYear(date)}</time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {organization} | {location}
                  </h4>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">
                    <span class="grow">{title} </span>
                  </h3>
                  <h4>
                    {organization} | {location}
                  </h4>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="courses-attended">
      <h2>Courses Attended</h2>
      {
        coursesAttended.map(
          async ({
            startDate,
            endDate,
            title,
            organization,
            location,
            instructor,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {organization} | {location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{instructor}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {organization} | {location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{instructor}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="freelance-works">
      <h2>Freelance Works</h2>
      {
        freelanceWorks.map(
          async ({
            title,
            startDate,
            endDate,
            category,
            location,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {category}
                    {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {category}
                    {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="buildsystems-works">
      <h2>BuildSystems Works</h2>
      {
        buildSystemsWorks.map(
          async ({
            title,
            startDate,
            endDate,
            category,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>{category}</h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>{category}</h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="artengineering-works">
      <h2>ArtEngineering Works</h2>
      {
        artEngineeringWorks.map(
          async ({
            title,
            startDate,
            endDate,
            category,
            location,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="alfred-rein-works">
      <h2>Alfred Rein Ingenieure Works</h2>
      {
        alfredReinWorks.map(
          async ({
            title,
            startDate,
            endDate,
            category,
            location,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="research-assistant-works">
      <h2>Research Assistant Works</h2>
      {
        icdItkeWorks.map(
          async ({
            title,
            startDate,
            endDate,
            category,
            location,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="atelier-marko-brajovic-works">
      <h2>Atelier Marko Brajovic Works</h2>
      {
        markoBrajovicWorks.map(
          async ({
            title,
            startDate,
            endDate,
            category,
            location,
            description,
            link,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{title}</h3>
                  <h4>
                    {category} {location ? ` | ${location}` : ""}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{description}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
  </Container>
</Base>

<style>
  /* Reset default margins */
  @page {
    margin: 1cm;
    /* Add page number in bottom-center */
    @bottom-center {
      content: counter(page) " / " counter(pages);
      font-size: 10pt;
      margin-bottom: 2rem;
    }
  }
  /* Ensure page numbers are printed */
  @media print {
    /* Reset some potential print-blocking styles */
    body * {
      visibility: visible;
    }
  }
</style>
