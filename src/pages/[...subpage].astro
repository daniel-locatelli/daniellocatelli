---
import {
  getAllBlocksByBlockId,
  getAllDatabases,
  getDatabaseByName,
} from "../lib/notion/client";
import type { Page } from "../lib/notion-interfaces";
import { importCoverImage } from "../lib/blog-helpers";
import { Image } from "astro:assets";
import Base from "@/layouts/Base.astro";
import PostBody from "@/components/Notion/PostBody.astro";
import RichText from "@/components/Notion/blocks/RichText.astro";
import * as interfaces from "../lib/notion-interfaces.ts";

export async function getStaticPaths() {
  const databases = await getAllDatabases();

  const paths = databases.flatMap((database) =>
    // The main pages are in the other file
    database.Pages.filter(() => database.Title !== "Pages").map((subpage) => ({
      params: { subpage: subpage.Slug },
      props: { subpage: subpage },
    }))
  );
  // console.dir(paths);

  return paths;
}

interface Props {
  subpage: Page;
}

const { subpage: slug } = Astro.params;
const { subpage } = Astro.props;

const [blocks] = await Promise.all([getAllBlocksByBlockId(subpage.PageId)]);

// Getting images dynamically with import.meta.glob()
// It only accepts string literals
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/notion/**/*.{jpeg,jpg,png,tiff,webp,gif,svg,avif}"
);

// Cover image
const image = await importCoverImage(subpage, images);
// console.log(subpage.Title);

let coverUrl = "";
if (homepage.Cover) {
  const url = new URL(homepage.Cover.Url);
  const dir = "/notion/" + url.pathname.split("/").slice(-2)[0];
  const fileNameConverted = returnImageNameAsJpg(url);
  const fileNameWithSlug = addSlugToName(fileNameConverted, homepage.Slug);
  coverUrl = `${dir}/${fileNameWithSlug}`;
}
---

<Base
  meta={{
    title: subpage.Name,
    description: subpage.Description_en,
    coverImage: coverUrl,
    coverAlt: subpage.CoverAlt || "Cover image",
  }}
>
  {
    image && (
      <Image
        class="md:rounded-md object-cover h-72 md:h-96 w-full mb-4"
        src={image}
        alt={subpage.CoverAlt}
        transition:name={slug + "-image"}
      />
    )
  }
  <section class="flex flex-col justify-center items-center font-body">
    <div class="sm:max-w-xl">
      <h1 class="title mb-4 font-heading font-light text-balance px-2 md:px-0">
        {subpage.Name}
      </h1>
      <table
        class="text-left table-auto border-separate border-spacing-x-4 [&>*]:align-text-top"
      >
        {
          subpage.DateStart && (
            <tr>
              <th class="font-body font-bold">Date</th>
              <td>{subpage.DateStart}</td>
            </tr>
          )
        }
        {
          subpage.Authors && subpage.Authors?.length > 0 && (
            <tr>
              {subpage.Authors.length === 1 ? (
                <th>Author</th>
              ) : (
                <th>Authors</th>
              )}
              <td>
                {subpage.Authors.map((author, index) => {
                  if (index === 0) {
                    return <span>{author.name}</span>;
                  } else {
                    return <span>, {author.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.Client && (
            <tr>
              <th>Client</th>
              <td>{subpage.Client}</td>
            </tr>
          )
        }
        {
          subpage.Director && subpage.Director.length > 0 && (
            <tr>
              {subpage.Director.length === 1 ? (
                <th>Director</th>
              ) : (
                <th>Directors</th>
              )}
              <td>
                {subpage.Director.map((director, index) => {
                  if (index === 0) {
                    return <span>{director.name}</span>;
                  } else {
                    return <span>, {director.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.Manager && subpage.Manager.length > 0 && (
            <tr>
              {subpage.Manager.length === 1 ? (
                <th>Manager</th>
              ) : (
                <th>Managers</th>
              )}
              <td>
                {subpage.Manager.map((manager, index) => {
                  if (index === 0) {
                    return <span>{manager.name}</span>;
                  } else {
                    return <span>, {manager.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.Team && subpage.Team.length > 0 && (
            <tr>
              <th>Team</th>
              <td>
                {subpage.Team.map((member, index) => {
                  if (index === 0) {
                    return <span>{member.name}</span>;
                  } else {
                    return <span>, {member.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.Development && subpage.Development.length > 0 && (
            <tr>
              <th>Development</th>
              <td>
                {subpage.Development.map((manager, index) => {
                  if (index === 0) {
                    return <span>{manager.name}</span>;
                  } else {
                    return <span>, {manager.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.Place !== "" && (
            <tr>
              <th>Place</th>
              <td>{subpage.Place}</td>
            </tr>
          )
        }
        {
          subpage.Language && subpage.Language.length > 0 && (
            <tr>
              {subpage.Language.length === 1 ? (
                <th>Language</th>
              ) : (
                <th>Languages</th>
              )}
              <td>
                {subpage.Language.map((manager, index) => {
                  if (index === 0) {
                    return <span>{manager.name}</span>;
                  } else {
                    return <span>, {manager.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.Link !== undefined && subpage.Link.length > 0 && (
            <tr>
              <th>Link</th>
              <td>
                {subpage.Link.map((richText: interfaces.RichText) => (
                  <RichText richText={richText} />
                ))}
              </td>
            </tr>
          )
        }
        {
          subpage.Apps && subpage.Apps.length > 0 && (
            <tr>
              <th>Apps</th>
              <td>
                {subpage.Apps.map((member, index) => {
                  if (index === 0) {
                    return <span>{member.name}</span>;
                  } else {
                    return <span>, {member.name}</span>;
                  }
                })}
              </td>
            </tr>
          )
        }
        {
          subpage.References !== undefined && subpage.References.length > 0 && (
            <tr>
              <th>References</th>
              <td>
                {subpage.References.map((richText: interfaces.RichText) => (
                  <RichText richText={richText} />
                ))}
              </td>
            </tr>
          )
        }
      </table>
      <div class="my-6">
        <PostBody blocks={blocks} slug={slug!} />
      </div>
    </div>
  </section>
</Base>

<style>
  th {
    font-weight: 300;
  }
</style>
