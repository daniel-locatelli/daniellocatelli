---
import Base from "@/layouts/Base.astro";
import profilePhoto from "@/assets/daniel-locatelli-v1.png";
import { Image } from "astro:assets";
import Container from "@/components/Container.astro";
import {
  db,
  eq,
  Summary,
  SkillProgramming,
  SkillProgrammingTranslations,
  SkillFrameworks,
  SkillFrameworksTranslations,
  SkillDatabases,
  SkillDatabasesTranslations,
  SkillDesign,
  SkillDesignTranslations,
  SkillSpecialized,
  SkillSpecializedTranslations,
  Experience,
  ExperienceTranslations,
  ExperienceItems,
  Education,
  EducatonTranslations,
  EducationItems,
  Scholarships,
  ScholarshipsTranslations,
  Publications,
  PublicationsTranslations,
  PersonToPublications,
  Certifications,
  CertificationsTranslations,
  Tutoring,
  TutoringTranslations,
  TalksAndLectures,
  TalksAndLecturesTranslations,
  CoursesAttended,
  CoursesAttendedTranslations,
  Works,
  WorksTranslations,
} from "astro:db";
import { Icon } from "astro-icon/components";

const getMonthYear = (date: Date): string => {
  const month =
    date.getMonth() < 9 ? `0${date.getMonth() + 1}` : date.getMonth() + 1;
  const year = date.getFullYear();
  return `${month}.${year}`;
};

const locale = "pt";

const summary = await db
  .selectDistinct({ text: Summary.text })
  .from(Summary)
  .where(eq(Summary.locale, locale));

const skillProgramming = await db
  .select()
  .from(SkillProgramming)
  .leftJoin(
    SkillProgrammingTranslations,
    eq(SkillProgramming.id, SkillProgrammingTranslations.skillId)
  )
  .where(eq(SkillProgrammingTranslations.locale, locale));

const skillFrameworks = await db
  .select()
  .from(SkillFrameworks)
  .leftJoin(
    SkillFrameworksTranslations,
    eq(SkillFrameworks.id, SkillFrameworksTranslations.skillId)
  )
  .where(eq(SkillFrameworksTranslations.locale, locale));

const skillDatabases = await db
  .select()
  .from(SkillDatabases)
  .leftJoin(
    SkillDatabasesTranslations,
    eq(SkillDatabases.id, SkillDatabasesTranslations.skillId)
  )
  .where(eq(SkillDatabasesTranslations.locale, locale));

const skillDesign = await db
  .select()
  .from(SkillDesign)
  .leftJoin(
    SkillDesignTranslations,
    eq(SkillDesign.id, SkillDesignTranslations.skillId)
  )
  .where(eq(SkillDesignTranslations.locale, locale));

const skillSpecialized = await db
  .select()
  .from(SkillSpecialized)
  .leftJoin(
    SkillSpecializedTranslations,
    eq(SkillSpecialized.id, SkillSpecializedTranslations.skillId)
  )
  .where(eq(SkillSpecializedTranslations.locale, locale));

const experience = await db
  .select()
  .from(Experience)
  .leftJoin(
    ExperienceTranslations,
    eq(Experience.id, ExperienceTranslations.experienceId)
  )
  .where(eq(ExperienceTranslations.locale, locale));

const itemsByExperienceId = await Promise.all(
  experience.map(async ({ Experience: exp }) => {
    const items = await db
      .select()
      .from(ExperienceItems)
      .where(eq(ExperienceItems.experienceId, exp.id));
    return { id: exp.id, items: items };
  })
);

const education = await db
  .select()
  .from(Education)
  .leftJoin(
    EducatonTranslations,
    eq(Education.id, EducatonTranslations.educationId)
  )
  .where(eq(EducatonTranslations.locale, locale));

const itemsByEducationId = await Promise.all(
  education.map(async ({ Education: edu }) => {
    const items = await db
      .select()
      .from(EducationItems)
      .where(eq(EducationItems.educationId, edu.id));
    return { id: edu.id, items: items };
  })
);

const scholarships = await db
  .select()
  .from(Scholarships)
  .leftJoin(
    ScholarshipsTranslations,
    eq(Scholarships.id, ScholarshipsTranslations.scholarshipId)
  )
  .where(eq(ScholarshipsTranslations.locale, locale));

const publications = await db
  .select()
  .from(Publications)
  .leftJoin(
    PublicationsTranslations,
    eq(Publications.id, PublicationsTranslations.publicationId)
  )
  .where(eq(PublicationsTranslations.locale, locale));

const personByPublicationId = await Promise.all(
  publications.map(async ({ Publications: pub }) => {
    const items = await db
      .select()
      .from(PersonToPublications)
      .where(eq(PersonToPublications.publicationId, pub.id));
    return { id: pub.id, items: items };
  })
);

const certifications = await db
  .select()
  .from(Certifications)
  .leftJoin(
    CertificationsTranslations,
    eq(Certifications.id, CertificationsTranslations.certificationId)
  )
  .where(eq(CertificationsTranslations.locale, locale));

const tutoring = await db
  .select()
  .from(Tutoring)
  .leftJoin(
    TutoringTranslations,
    eq(Tutoring.id, TutoringTranslations.tutoringId)
  )
  .where(eq(TutoringTranslations.locale, locale));

const talksAndLectures = await db
  .select()
  .from(TalksAndLectures)
  .leftJoin(
    TalksAndLecturesTranslations,
    eq(TalksAndLectures.id, TalksAndLecturesTranslations.talkId)
  )
  .where(eq(TalksAndLecturesTranslations.locale, locale));

const coursesAttended = await db
  .select()
  .from(CoursesAttended)
  .leftJoin(
    CoursesAttendedTranslations,
    eq(CoursesAttended.id, CoursesAttendedTranslations.courseId)
  )
  .where(eq(CoursesAttendedTranslations.locale, locale));

const works = await db
  .select()
  .from(Works)
  .leftJoin(WorksTranslations, eq(Works.id, WorksTranslations.workId))
  .where(eq(WorksTranslations.locale, locale));
---

<Base
  meta={{
    title: "CV",
    description:
      "Este é meu CV completo, incluindo trabalho, educação, palestras, publicações, certificados e mais.",
    coverAlt: "Foto de perfil de Daniel Locatelli.",
    coverImage: "@/assets/daniel-locatelli.png",
    locale: "pt",
    slug: "cv",
  }}
>
  <Container
    class="font-body relative flex flex-col gap-4 text-base print:gap-2 print:text-sm print:text-black [&_.item-text]:px-6 [&_.item-text]:py-4 [&_.item-text]:print:break-inside-avoid [&_.item-text]:print:px-2 [&_.item-text]:print:py-1 [&_.timeline]:shrink-0 [&_.timeline]:grow [&_.timeline]:border-r [&_.timeline]:print:h-2 [&_.timeline-top]:h-[17px] [&_.timeline-top]:border-r [&_.timeline-top]:print:h-3 [&_.timeline-wrapper]:mx-3 [&_.timeline-wrapper]:flex [&_.timeline-wrapper]:shrink-0 [&_.timeline-wrapper]:flex-col [&_.timeline-wrapper]:items-center [&_.timeline-wrapper]:font-sans [&_.timeline-wrapper]:sm:mx-6 [&_a:hover]:text-emerald-400 [&_h2]:mb-3 [&_h2]:border-b [&_h2]:pb-1 [&_h2]:text-3xl [&_h2]:print:mb-1 [&_h2]:print:break-after-avoid [&_h3]:text-lg [&_h4]:text-lg [&_h4]:text-zinc-400"
  >
    <div class="flex flex-col gap-6 pt-20 sm:flex-row sm:pt-28 print:pt-2">
      <Image
        src={profilePhoto}
        alt="Foto de perfil de Daniel Locatelli."
        class="rounded-full sm:size-36"
      />
      <div class="flex flex-col justify-center gap-2">
        <div class="flex flex-col gap-2">
          <h1 class="font-title text-5xl">Daniel Locatelli</h1>
          <p class="text-xl">Desenvolvedor de software AEC</p>
        </div>
        <div class="flex flex-col gap-5 text-sm sm:flex-row">
          <p class="text-pretty sm:text-xs sm:text-balance">
            "A arquitetura é um campo transdisciplinar, seu futuro está no uso
            de técnicas computacionais e co-design combinadas com materiais
            ecológicos vernaculares."
          </p>
          <address class="flex flex-col sm:text-xs">
            <a href="mailto:architect.locatelli@gmail.com"
              >architect.locatelli@gmail.com</a
            >
            <span> +49 178 324-0834 </span>
            <span> Munique, Alemanha </span>
          </address>
        </div>
      </div>
    </div>
    <section id="summary">
      <h2>Resumo</h2>
      <p class="text-pretty">{summary[0].text}</p>
    </section>
    <section id="technical-skills">
      <h2>Habilidades Técnicas</h2>
      <table
        class="table-auto [&_td]:leading-5 [&_th]:pr-2 [&_th]:text-right [&_th]:align-top sm:[&_th]:pr-4"
      >
        <tr>
          <th>Programação</th>
          <td>
            {
              skillProgramming.map(
                (
                  { SkillProgramming, SkillProgrammingTranslations },
                  idx,
                  arr
                ) =>
                  idx === arr.length - 1
                    ? (SkillProgrammingTranslations?.skillId ??
                      SkillProgramming.id)
                    : (SkillProgrammingTranslations?.skillId ??
                        SkillProgramming.id) + ", "
              )
            }
          </td>
        </tr>
        <tr>
          <th>Frameworks</th>
          <td>
            {
              skillFrameworks.map(
                ({ SkillFrameworks, SkillFrameworksTranslations }, idx, arr) =>
                  idx === arr.length - 1
                    ? SkillFrameworks.id
                    : SkillFrameworks.id + ", "
              )
            }
          </td>
        </tr>
        <tr>
          <th>Bancos de Dados</th>
          <td>
            {
              skillDatabases.map(
                ({ SkillDatabases, SkillDatabasesTranslations }, idx, arr) =>
                  idx === arr.length - 1
                    ? SkillDatabases.id
                    : SkillDatabases.id + ", "
              )
            }
          </td>
        </tr>
        <tr>
          <th>Ferramentas de Design</th>
          <td>
            {
              skillDesign.map(
                ({ SkillDesign, SkillDesignTranslations }, idx, arr) =>
                  idx === arr.length - 1
                    ? SkillDesign.id
                    : SkillDesign.id + ", "
              )
            }
          </td>
        </tr>
        <tr>
          <th>Habilidades Especializadas</th>
          <td>
            {
              skillSpecialized.map(
                (
                  { SkillSpecialized, SkillSpecializedTranslations },
                  idx,
                  arr
                ) =>
                  idx === arr.length - 1
                    ? (SkillSpecializedTranslations?.title ??
                      SkillSpecialized.title)
                    : (SkillSpecializedTranslations?.title ??
                        SkillSpecialized.title) + ", "
              )
            }
          </td>
        </tr>
      </table>
    </section>
    <section
      id="work-experience"
      class="[&_li]:text-pretty [&_ul]:list-disc [&_ul]:pl-4 [&_ul]:text-sm [&_ul]:text-zinc-400"
    >
      <h2>Experiência Profissional</h2>
      {
        experience.map(
          async ({
            Experience: { id, startDate, endDate, link },
            ExperienceTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  <span>Atual</span>
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{ExperienceTranslations?.title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {ExperienceTranslations?.company} |{" "}
                    {ExperienceTranslations?.location}
                  </h4>
                  {ExperienceTranslations?.companyNote ? (
                    <p class="mb-1 ml-1 text-xs text-zinc-400">
                      <sup>⤷</sup>
                      {ExperienceTranslations.companyNote}
                    </p>
                  ) : (
                    ""
                  )}
                  <ul>
                    {itemsByExperienceId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{ExperienceTranslations?.title}</h3>
                  <h4>
                    {ExperienceTranslations?.company} |{" "}
                    {ExperienceTranslations?.location}
                  </h4>
                  {ExperienceTranslations?.companyNote ? (
                    <p class="mb-1 ml-1 text-xs text-zinc-400">
                      <sup>⤷</sup>
                      {ExperienceTranslations.companyNote}
                    </p>
                  ) : (
                    ""
                  )}
                  <ul>
                    {itemsByExperienceId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section
      id="education"
      class="[&_li]:text-pretty [&_ul]:list-disc [&_ul]:pl-4 [&_ul]:text-sm [&_ul]:text-zinc-400"
    >
      <h2>Educação</h2>
      {
        education.map(
          async ({
            Education: { id, startDate, endDate, link },
            EducatonTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  <span>Atual</span>
                )}

                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">
                      {EducatonTranslations?.title ?? ""}{" "}
                    </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {EducatonTranslations?.institution ?? ""} |{" "}
                    {EducatonTranslations?.location ?? ""}
                  </h4>
                  <ul>
                    {itemsByEducationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{EducatonTranslations?.title ?? ""}</h3>
                  <h4>
                    {EducatonTranslations?.institution ?? ""} |{" "}
                    {EducatonTranslations?.location ?? ""}
                  </h4>
                  <ul>
                    {itemsByEducationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item) => (
                        <li>{item.text}</li>
                      ))}
                  </ul>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="scholarships">
      <h2>Bolsas</h2>
      {
        scholarships.map(
          async ({
            Scholarships: { startDate, endDate, link },
            ScholarshipsTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  <span>Atual</span>
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">
                      {ScholarshipsTranslations?.title ?? ""}{" "}
                    </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>{ScholarshipsTranslations?.institution ?? ""}</h4>
                  <p class="text-sm text-pretty text-zinc-400">
                    {ScholarshipsTranslations?.description ?? ""}
                  </p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{ScholarshipsTranslations?.title ?? ""}</h3>
                  <h4>{ScholarshipsTranslations?.institution ?? ""}</h4>
                  <p class="text-sm text-pretty text-zinc-400">
                    {ScholarshipsTranslations?.description ?? ""}
                  </p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="publications">
      <h2>Publicações</h2>
      {
        publications.map(
          async ({
            Publications: { id, date, link },
            PublicationsTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={date.toDateString()}>{getMonthYear(date)}</time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">
                      {PublicationsTranslations?.title ?? ""}{" "}
                    </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {PublicationsTranslations?.publisher ?? ""}
                    {PublicationsTranslations?.location
                      ? `| ${PublicationsTranslations.location}`
                      : ""}
                  </h4>
                  <p class="flex flex-wrap text-sm text-zinc-400">
                    {personByPublicationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item, index, array) => (
                        <span class="mr-1 text-nowrap">
                          {index + 1 === array.length
                            ? item.personId
                            : `${item.personId}, `}
                        </span>
                      ))}
                  </p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{PublicationsTranslations?.title ?? ""}</h3>
                  <h4>
                    {PublicationsTranslations?.publisher ?? ""}
                    {PublicationsTranslations?.location
                      ? `| ${PublicationsTranslations.location}`
                      : ""}
                  </h4>
                  <p class="flex flex-wrap text-sm text-zinc-400">
                    {personByPublicationId
                      .find((itemObj) => itemObj.id === id)
                      ?.items.map((item, index, array) => (
                        <span class="mr-1 text-nowrap">
                          {index + 1 === array.length
                            ? item.personId
                            : `${item.personId}, `}
                        </span>
                      ))}
                  </p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="certifications">
      <h2>Certificados</h2>
      {
        certifications.map(
          async ({
            Certifications: { date, link },
            CertificationsTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={date.toDateString()}>{getMonthYear(date)}</time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">
                      {CertificationsTranslations?.title ?? ""}{" "}
                    </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>{CertificationsTranslations?.issuer ?? ""}</h4>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">
                    {CertificationsTranslations?.title ?? ""}
                  </h3>
                  <h4>{CertificationsTranslations?.issuer ?? ""}</h4>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="tutoring">
      <h2>Tutoria</h2>
      {
        tutoring.map(
          async ({
            Tutoring: { startDate, endDate, link },
            TutoringTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">{TutoringTranslations?.title} </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {TutoringTranslations?.organization} |{" "}
                    {TutoringTranslations?.location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">
                    {TutoringTranslations?.description}
                  </p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{TutoringTranslations?.title}</h3>
                  <h4>
                    {TutoringTranslations?.organization} |{" "}
                    {TutoringTranslations?.location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">
                    {TutoringTranslations?.description}
                  </p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="talks-and-lectures">
      <h2>Palestras</h2>
      {
        talksAndLectures.map(
          async ({
            TalksAndLectures: { date, link },
            TalksAndLecturesTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                <time datetime={date.toDateString()}>{getMonthYear(date)}</time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">
                      {TalksAndLecturesTranslations?.title}{" "}
                    </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {TalksAndLecturesTranslations?.organization} |{" "}
                    {TalksAndLecturesTranslations?.location}
                  </h4>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{TalksAndLecturesTranslations?.title}</h3>
                  <h4>
                    {TalksAndLecturesTranslations?.organization} |{" "}
                    {TalksAndLecturesTranslations?.location}
                  </h4>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="courses-attended">
      <h2>Cursos Realizados</h2>
      {
        coursesAttended.map(
          async ({
            CoursesAttended: { startDate, endDate, instructor, link },
            CoursesAttendedTranslations,
          }) => (
            <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
              <div class="timeline-wrapper">
                <div class="timeline-top" />
                {endDate ? (
                  <time datetime={endDate.toDateString()}>
                    {getMonthYear(endDate)}
                  </time>
                ) : (
                  ""
                )}
                <time datetime={startDate.toDateString()}>
                  {getMonthYear(startDate)}
                </time>
                <div class="timeline" />
              </div>
              {link ? (
                <a
                  href={link}
                  class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
                >
                  <h3 class="mb-0 flex">
                    <span class="grow">
                      {CoursesAttendedTranslations?.title}{" "}
                    </span>
                    <Icon
                      name="mdi:external-link"
                      class="mt-2 size-3 shrink-0 print:hidden"
                    />
                  </h3>
                  <h4>
                    {CoursesAttendedTranslations?.organization} |{" "}
                    {CoursesAttendedTranslations?.location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{instructor}</p>
                </a>
              ) : (
                <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                  <h3 class="mb-0">{CoursesAttendedTranslations?.title}</h3>
                  <h4>
                    {CoursesAttendedTranslations?.organization} |{" "}
                    {CoursesAttendedTranslations?.location}
                  </h4>
                  <p class="text-sm text-pretty text-zinc-400">{instructor}</p>
                </div>
              )}
            </div>
          )
        )
      }
    </section>
    <section id="works">
      <h2>Projetos</h2>
      {
        works.map(async ({ Works: work, WorksTranslations: translation }) => (
          <div class="group grid grid-cols-[100px_minmax(100px,1fr)]">
            <div class="timeline-wrapper">
              <div class="timeline-top" />
              {work.endDate ? (
                <time datetime={work.endDate.toDateString()}>
                  {getMonthYear(work.endDate)}
                </time>
              ) : (
                ""
              )}
              <time datetime={work.startDate.toDateString()}>
                {getMonthYear(work.startDate)}
              </time>
              <div class="timeline" />
            </div>
            {translation && translation.link ? (
              <a
                href={translation.link}
                class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]"
              >
                <h3 class="mb-0 flex">
                  <span class="grow">{translation.title} </span>
                  <Icon
                    name="mdi:external-link"
                    class="mt-2 size-3 shrink-0 print:hidden"
                  />
                </h3>
                <h4>
                  {translation.category}
                  {translation.location ? ` | ${translation.location}` : ""}
                </h4>
                <p class="text-sm text-pretty text-zinc-400">
                  {translation.description}
                </p>
              </a>
            ) : translation ? (
              <div class="item-text group-odd:bg-[rgb(25,25,25)] group-even:bg-[rgb(21,21,21)]">
                <h3 class="mb-0">{translation.title}</h3>
                <h4>
                  {translation.category}
                  {translation.location ? ` | ${translation.location}` : ""}
                </h4>
                <p class="text-sm text-pretty text-zinc-400">
                  {translation.description}
                </p>
              </div>
            ) : null}
          </div>
        ))
      }
    </section>
  </Container>
</Base>

<style>
  /* Reset default margins */
  @page {
    margin: 1cm;
    /* Add page number in bottom-center */
    @bottom-center {
      content: counter(page) " / " counter(pages);
      font-size: 10pt;
      margin-bottom: 2rem;
    }
  }
  /* Ensure page numbers are printed */
  @media print {
    /* Reset some potential print-blocking styles */
    body * {
      visibility: visible;
    }
  }
</style>
