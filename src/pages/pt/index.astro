---
import { siteConfig } from "@/site-config";
import { getDatabaseByName } from "../../lib/notion/client";
import type { Page } from "../../lib/notion-interfaces";
import {
  importCoverImage,
  modifyFileName,
  urlToFileName,
} from "src/lib/blog-helpers";
import BaseHead from "@/components/BaseHead.astro";
import { Image } from "astro:assets";
import logo from "../../assets/logo-dl.svg";
import arrowRight from "../../assets/arrow-right.svg";
import Footer from "@/components/layout/Footer.astro";
import profilePhoto from "../../assets/daniel-locatelli.png";

interface Props {
  page: Page;
}

let pagesDatabase = await getDatabaseByName("Pages");
const homepage = pagesDatabase.Pages.find((page) => page.Name === "Homepage")!;
const otherPages: Page[] = pagesDatabase.Pages.filter(
  (page) => page.Name !== "Homepage"
);

const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/notion/**/*.{jpeg,jpg,png,tiff,webp,gif,svg,avif}"
);

// Cover image
// const coverImage = await importCoverImage(homepage, images);

let coverUrl = "";
if (homepage.Cover) {
  const url = new URL(homepage.Cover.Url);
  const dir = "media/" + url.pathname.split("/").slice(-2)[0];
  const fileNameConverted = urlToFileName(url);
  console.log("fileNameConverted");
  console.log(fileNameConverted);
  const fileNameWithSlug = modifyFileName(fileNameConverted, {
    // newBeginning: homepage.Slug.split("/").pop() + "_",
  });
  console.log("fileNameWithSlug");
  console.log(fileNameWithSlug);
  coverUrl = `${dir}/${fileNameWithSlug}`;
}

let coverList: string[] = [];

otherPages.map((page) => {
  let coverUrlBg = "";
  if (page.Cover) {
    const url = new URL(page.Cover.Url);
    const dir = "media/" + url.pathname.split("/").slice(-2)[0];
    const fileNameConverted = urlToFileName(url);
    const fileNameBgWithSlug = modifyFileName(fileNameConverted, {
      // newBeginning: page.Slug.split("/").pop() + "_",
      newEnd: "-bg",
      newExtension: "jpg",
    });
    coverUrlBg = `${dir}/${fileNameBgWithSlug}`;
    coverList.push(coverUrlBg);
  }
});

const locale = "pt";
---

<html lang={locale}>
  <head>
    <BaseHead
      description={homepage.Description_pt}
      title={siteConfig.title}
      coverImage={coverUrl}
      coverAlt={homepage.CoverAlt_pt || "Cover image"}
      locale={locale}
      slug={"/" + locale}
    />
    {
      coverList.map((coverUrlBg) => {
        return <link rel="preload" href={coverUrlBg} as="image" />;
      })
    }
  </head>
  <body class="m-0 p-0 h-full min-w-full snap-mandatory snap-y">
    <main
      class="relative grid grid-rows-4 md:grid-cols-2 md:grid-rows-2 min-h-svh min-h-screen max-h-svh max-h-screen w-full overflow-hidden snap-center"
    >
      <a
        href="/pt/#about"
        class="absolute h-20 w-24 z-30 p-4 mix-blend-difference top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2"
      >
        <Image
          class="w-full"
          src={logo}
          loading={"eager"}
          alt="Daniel Locatelli logo"
        />
      </a>
      {
        otherPages.map(async (page, index) => {
          // Import cover from database
          const coverImage = await importCoverImage(page, images);
          // link not on the cover/title, but just on the description
          return (
            <div class="relative overflow-hidden" id="image-container">
              <div
                class="absolute z-10 bg-black flex justify-between h-full w-full bg-cover bg-center scale-125 blur-lg"
                style={`background-image: url(${coverList[index]})`}
                id="background"
              />
              <a
                href={"/pt/" + page.Slug}
                class="relative z-20 flex justify-center transition duration-700 h-full"
                id="cover"
                data-astro-prefetch
              >
                <h1 class="z-30 absolute text-white top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 mix-blend-difference font-title text-3xl md:text-6xl pointer-events-none animate-fade">
                  {page.Name_pt}
                </h1>
                <Image
                  class="object-cover object-center animate-fade"
                  src={coverImage}
                  alt={page.CoverAlt_pt!}
                  transition:name={page.Slug + "-image"}
                  loading="eager"
                  widths={[300, 700, 1000, 1280, 1400, 1600, coverImage.width]}
                  sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${coverImage.width}px`}
                />
              </a>
              <a
                href={"/" + page.Slug}
                class="absolute z-0 inset-0 w-full h-full bg-white"
                id="link"
              >
                <div class="relative flex flex-col justify-center h-full items-center">
                  <h2 class="p-6 md:p-10 text-black text-center font-light font-body text-lg md:text-4xl text-balance">
                    {page.ShortDescription_pt}
                  </h2>
                  <div class="flex flex-col justify-center">
                    <Image
                      src={arrowRight}
                      alt={"Go to " + page.Name_pt}
                      class="h-5 w-5 md:h-8 md:w-8"
                    />
                  </div>
                </div>
              </a>
            </div>
          );
        })
      }
    </main>
    <section
      id="about"
      class="flex flex-col min-h-screen justify-center snap-center"
    >
      <div class="flex flex-col md:flex-row justify-center items-center">
        <Image
          class="h-56 w-56 mb-4 md:mb-0 md:h-80 md:w-80 rounded-full md:mr-12"
          src={profilePhoto}
          alt="Daniel Locatelli profile photo"
          loading="eager"
        />
        <div class="px-8">
          <h1
            class="text-center md:text-left font-title text-3xl md:text-6xl mb-2 md:mb-6 pointer-events-none animate-fade"
          >
            Daniel Locatelli
          </h1>
          <p
            class="text-center md:text-left text-xl md:text-3xl font-body mb-4"
          >
            Soluções de Software para AECO
          </p>
          <p class="text-l font-body">Minha Expertise:</p>
          <ul
            class="text-l text-balance font-body list-disc md:list-inside mb-4 [&>*]:mt-2"
          >
            <li>
              Plugins personalizados que se integram perfeitamente às suas
              ferramentas
            </li>
            <li>
              Aplicativos web escaláveis que podem ser acessados de qualquer
              lugar
            </li>
            <li>
              Fluxos de trabalho otimizados utilizando design e engenharia
              computacional
            </li>
          </ul>
          <a
            href="https://wa.me/message/D7VUYQWPBUWHG1"
            class="flex md:inline-block text-xl justify-center md:justify-start font-body py-3 px-5 rounded-md bg-[radial-gradient(ellipse_at_top_right,_var(--tw-gradient-stops))] from-green-400 to-green-500 text-black hover:shadow-[3px_3px_rgba(0,_98,_90,_0.4),_7px_7px_rgba(0,_98,_90,_0.3),_11px_11px_rgba(0,_98,_90,_0.2)] transition"
            target="_blank">Vamos conversar</a
          >
        </div>
      </div>
      <!-- <p class="text-xl font-body w-1/2 self-center">
        With over 9 years of experience in computational design and engineering,
        I've already collaborated with offices like <a
          class="underline"
          href="https://markobrajovic.com">Atelier Marko Brajovic</a
        >, <a class="underline" href="https://art-engineering.net"
          >ArtEngineering</a
        > and <a class="underline" href="https://buildsystems.de"
          >BuildSystems</a
        >. Let's transform your AEC workflows together.
      </p> -->
    </section>
    <Footer locale={locale} />
    <style>
      html {
        scroll-snap-type: y proximity;
        overflow-y: scroll;
      }
    </style>
    <script src="../../lib/home-scripts.ts"></script>
  </body>
</html>
