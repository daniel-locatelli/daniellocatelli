---
// GeodesicDome.astro
// Props for customization
export interface Props {
  height?: string;
  initialSubdivisions?: number;
}

const { height = "180px" } = Astro.props;
---

<div class="geodesic-dome-container" style={`height: ${height}`}>
  <div class="canvas-container" id="geodesic-canvas"></div>
</div>

<style>
  .geodesic-dome-container {
    position: relative;
    width: 100%;
    border-radius: 12px;
    overflow: hidden;
  }

  .canvas-container {
    width: 100%;
    height: 100%;
  }
</style>

<script>
  // Declare THREE as a global variable to avoid TypeScript errors
  declare global {
    const THREE: any;
  }

  // Import Three.js as a module
  import * as THREE from "three";
  import { LineMaterial } from "three/addons/lines/LineMaterial.js";
  import { Wireframe } from "three/addons/lines/Wireframe.js";
  import { WireframeGeometry2 } from "three/addons/lines/WireframeGeometry2.js";

  (() => {
    interface FaceData {
      normal: THREE.Vector3;
      center: THREE.Vector3;
      vertexIndices: number[];
    }

    class GeodesicDomeComponent {
      private container: HTMLElement;
      private rect: DOMRect;
      private scene: THREE.Scene;
      private camera: THREE.PerspectiveCamera;
      private renderer: THREE.WebGLRenderer;
      private dome: any;
      private animationId: number | null;
      private resizeObserver: ResizeObserver | null;

      // Explosion properties
      private originalPositions: Float32Array | null = null;
      private faceData: FaceData[] = [];
      private explosionAmount: number = 0;
      private isExploding: boolean = false;

      // Inertia state
      private targetExplosion: number = 0;
      private currentExplosion: number = 0;
      private targetRotation: number = 0;
      private currentRotation: number = 0;
      private velocityExplosion: number = 0;
      private velocityRotation: number = 0;

      constructor(container: HTMLElement) {
        this.container = container;
        this.rect = this.container.getBoundingClientRect();
        this.scene = new THREE.Scene();
        this.camera = new THREE.PerspectiveCamera(
          75,
          this.rect.width / this.rect.height,
          0.1,
          1000
        );
        this.renderer = new THREE.WebGLRenderer({
          antialias: true,
          alpha: true,
        });
        this.dome = null;
        this.animationId = null;
        this.resizeObserver = null;

        this.init();
        this.animate();
      }

      private init(): void {
        // Scene
        this.camera.position.set(0, 0, 8);

        this.renderer.setPixelRatio(window.devicePixelRatio);
        this.renderer.setClearColor(0x000000, 0.0);

        this.renderer.setSize(this.rect.width, this.rect.height);
        this.renderer.shadowMap.enabled = true;
        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
        this.container.appendChild(this.renderer.domElement);

        // Lighting
        const ambientLight = new THREE.AmbientLight(0x111111, 0.5);
        this.scene.add(ambientLight);

        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5);
        directionalLight.position.set(12, 10, 10);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 1024;
        directionalLight.shadow.mapSize.height = 1024;
        directionalLight.shadow.radius = 10;
        this.scene.add(directionalLight);

        const pointLight = new THREE.PointLight(0xffffff, 0.5, 100);
        pointLight.position.set(-5, 5, -5);
        this.scene.add(pointLight);

        // Create dome
        this.createDome();
        this.setupScrollAnimation();

        // Event listeners
        this.resizeObserver = new ResizeObserver(() => this.onResize());
        this.resizeObserver.observe(this.container);

        // Add click event to toggle explosion
        this.container.addEventListener("click", () => this.toggleExplosion());
      }

      private createDome(): void {
        if (this.dome) {
          this.scene.remove(this.dome);
        }

        let geometry: THREE.BufferGeometry = new THREE.IcosahedronGeometry(
          3,
          2
        );

        // Ensure geometry is non-indexed so each face has unique vertices
        if (geometry.index) {
          geometry = geometry.toNonIndexed();
        }

        // Store original positions and calculate face data for explosion
        this.originalPositions = new Float32Array(
          geometry.attributes.position.array
        );
        this.calculateFaceData(geometry);

        const material = new THREE.MeshPhongMaterial({
          color: 0x444444,
          transparent: true,
          opacity: 1,
          side: THREE.DoubleSide,
        });

        this.dome = new THREE.Mesh(geometry, material);
        this.dome.castShadow = true;
        this.dome.receiveShadow = true;

        // Add wireframe overlay for solid mode
        const wireframeGeometry = new WireframeGeometry2(geometry);
        const lineMaterial = new LineMaterial({
          color: 0x05df72,
          linewidth: 1, // Note: linewidth > 1 doesn't work on most platforms
        });
        const wireframeMesh = new Wireframe(wireframeGeometry, lineMaterial);
        wireframeMesh.scale.set(1.01, 1.01, 1.01); // Slightly larger to avoid z-fighting
        this.dome.add(wireframeMesh);

        this.scene.add(this.dome);
      }

      private calculateFaceData(geometry: THREE.BufferGeometry): void {
        const positions = geometry.attributes.position.array as Float32Array;
        this.faceData = [];

        // For non-indexed geometry, each 3 consecutive vertices form a face
        for (let i = 0; i < positions.length; i += 9) {
          const a = i;
          const b = i + 3;
          const c = i + 6;

          const v1 = new THREE.Vector3(
            positions[a],
            positions[a + 1],
            positions[a + 2]
          );
          const v2 = new THREE.Vector3(
            positions[b],
            positions[b + 1],
            positions[b + 2]
          );
          const v3 = new THREE.Vector3(
            positions[c],
            positions[c + 1],
            positions[c + 2]
          );

          const center = new THREE.Vector3()
            .add(v1)
            .add(v2)
            .add(v3)
            .divideScalar(3);

          const edge1 = new THREE.Vector3().subVectors(v2, v1);
          const edge2 = new THREE.Vector3().subVectors(v3, v1);
          const normal = new THREE.Vector3()
            .crossVectors(edge1, edge2)
            .normalize();

          // Vertex indices for non-indexed geometry are just the vertex numbers
          const vertexIndices = [i / 3, i / 3 + 1, i / 3 + 2];

          this.faceData.push({ normal, center, vertexIndices });
        }
      }

      private explodeGeometry(amount: number): void {
        if (!this.dome || !this.originalPositions) return;

        const geometry = this.dome.geometry as THREE.BufferGeometry;
        const positions = geometry.attributes.position.array as Float32Array;

        // Reset to original positions
        positions.set(this.originalPositions);

        // Apply explosion effect to each face
        this.faceData.forEach(({ normal, vertexIndices }) => {
          const displacement = normal.clone().multiplyScalar(amount);

          vertexIndices.forEach((vertexIndex) => {
            const offset = vertexIndex * 3;
            positions[offset] += displacement.x;
            positions[offset + 1] += displacement.y;
            positions[offset + 2] += displacement.z;
          });
        });

        // Update geometry
        geometry.attributes.position.needsUpdate = true;
        geometry.computeVertexNormals();

        // Update wireframe as well
        if (this.dome.children.length > 0) {
          const wireframeMesh = this.dome.children[0] as any;
          if (wireframeMesh && wireframeMesh.geometry) {
            wireframeMesh.geometry.dispose();
            const newWireframeGeometry = new WireframeGeometry2(geometry);
            wireframeMesh.geometry = newWireframeGeometry;
          }
        }
      }

      private toggleExplosion(): void {
        this.isExploding = !this.isExploding;
      }

      private onResize(): void {
        const rect = this.container.getBoundingClientRect();
        this.camera.aspect = rect.width / rect.height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(rect.width, rect.height);
      }

      private setupScrollAnimation(): void {
        window.addEventListener("scroll", () => {
          const rect = this.container.getBoundingClientRect();
          const windowHeight =
            window.innerHeight || document.documentElement.clientHeight;
          // Map: top of page = max, bottom = min
          const domeTop = rect.top;
          const domeBottom = rect.bottom;
          // percent: 1 at top, 0 at bottom
          let percent = 1 - Math.max(0, Math.min(domeBottom / windowHeight, 1));
          this.targetExplosion = percent * 1.75;
          this.targetRotation = percent * Math.PI; // 0 to 180deg
        });
      }

      private animate(): void {
        this.animationId = requestAnimationFrame(() => this.animate());
        // Inertia and spring-back (even more slack)
        const spring = 0.005;
        const damping = 0.9;
        // Explosion inertia
        const explosionDelta = this.targetExplosion - this.currentExplosion;
        this.velocityExplosion =
          this.velocityExplosion * damping + explosionDelta * spring;
        this.currentExplosion += this.velocityExplosion;
        // Rotation inertia
        const rotDelta = this.targetRotation - this.currentRotation;
        this.velocityRotation =
          this.velocityRotation * damping + rotDelta * spring;
        this.currentRotation += this.velocityRotation;
        // Apply
        if (this.dome) {
          this.dome.rotation.y = this.currentRotation;
        }
        this.explodeGeometry(this.currentExplosion);
        this.renderer.render(this.scene, this.camera);
      }

      public dispose(): void {
        if (this.animationId) {
          cancelAnimationFrame(this.animationId);
        }
        if (this.resizeObserver) {
          this.resizeObserver.disconnect();
        }
        if (this.renderer) {
          this.renderer.dispose();
        }
      }
    }

    // Initialize the component
    const container = document.getElementById("geodesic-canvas") as HTMLElement;
    if (container) {
      const geodesicDome = new GeodesicDomeComponent(container);

      // Cleanup on page navigation
      document.addEventListener("astro:before-preparation", () => {
        geodesicDome.dispose();
      });
    }
    // No catch needed since import is static
  })();
</script>
