---
import { ENABLE_LIGHTBOX } from "../../../server-constants.ts";
import { type Block } from "../../../lib/notion-interfaces.ts";
import Caption from "./Caption.astro";
import { Image } from "astro:assets";
import { addSlugToName } from "../../../lib/blog-helpers";

export interface Props {
  block: Block;
  slug: string;
}

const { block, slug } = Astro.props;

let url: URL;
try {
  if (block.Image!.External) {
    url = new URL(block.Image!.External.Url);
  } else if (block.Image!.File) {
    url = new URL(block.Image!.File!.Url);
  }
} catch (error) {
  console.log("\nError while preparing URL: " + error);
}

let image: any;
let imageExtension: string;
// Getting images dynamically with import.meta.glob()
// It only accepts string literals
// https://docs.astro.build/en/recipes/dynamically-importing-images/
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/notion/**/*.{jpeg,jpg,png,tiff,webp,gif,svg,avif}"
);
if (block.Image!.File) {
  try {
    const dir = "/src/assets/notion/" + url!.pathname.split("/").slice(-2)[0];
    const imageName = decodeURIComponent(url!.pathname.split("/").slice(-1)[0]);
    imageExtension = imageName.split(".")[1];
    const imageNameWithSlug = addSlugToName(imageName, slug);
    const imagePath = `${dir}/${imageNameWithSlug}`;
    // The result from images is an array of objects that have file paths as keys
    // so you need to use the full image path to get the image-object.
    // Inside this image-object the 'default' key has the necessary ImageMetadata for astro
    await images[imagePath]().then((result) => {
      image = result.default;
    });
  } catch (error) {
    console.log("\nError while getting image for astro component: \n" + error);
  }
}

function getFirstLine(text: string) {
  const lines = text.split(/\n/);
  if (!lines.length) {
    return "";
  }
  return lines[0];
}

let altText: string;
if (block.Image && block.Image.Caption[0]) {
  altText = getFirstLine(block.Image?.Caption[0].Text!.Content);
} else {
  altText = block.Type;
}
---

<figure class="image">
  {
    // if it has valid url, is a downloaded file and is not svg
    url! && block.Image!.File && imageExtension! !== "svg" && (
      <div>
        <div>
          <Image
            src={image}
            alt={altText}
            widths={[300, 700, 1000, 1280, 1400, 1600, image.width]}
            sizes={`(max-width: 300px) 300px, (max-width: 700px) 700px, (max-width: 1000px) 1000px, (max-width: 1280px) 1280px, (max-width: 1400px) 1400px, (max-width: 1600px) 1600px, ${image.width}px`}
          />
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
  {
    // if it has valid url, is a downloaded file and is not svg
    url! && block.Image!.File && imageExtension! === "svg" && (
      <div>
        <div>
          <Image src={image} alt={altText} />
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
  {
    url! && block.Image!.External && (
      <div>
        <div>
          <Image src={url!.href} alt={altText} inferSize />
        </div>
        <Caption richTexts={block.Image!.Caption} />
      </div>
    )
  }
</figure>
<style>
  .image {
    display: flex;
    margin: 0.2rem auto 0;
  }
  .image > div {
    margin: 0 auto;
  }
  .image > div > div {
  }
  .image > div > div img {
    display: block;
    max-width: 100%;
    border-radius: var(--card-border-radius);
  }
</style>
