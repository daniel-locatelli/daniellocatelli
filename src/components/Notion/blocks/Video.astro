---
import {
  isYouTubeURL,
  modifyFileName,
  parseYouTubeVideoId,
} from "../../../lib/blog-helpers.ts";
import Caption from "./Caption.astro";
import type { Block } from "../../../lib/notion-interfaces.ts";

export interface Props {
  block: Block;
  slug: string;
}

const { block } = Astro.props;

let url: URL;
try {
  if (block.Video!.External) {
    url = new URL(block.Video!.External?.Url!);
  } else if (block.Video!.File) {
    url = new URL(block.Video!.File!.Url);
  }
} catch (error) {
  console.log("Invalid file URL\n" + error);
}

let video: any;
let videoExtension: string;
// Getting images dynamically with import.meta.glob()
// It only accepts string literals
// https://docs.astro.build/en/recipes/dynamically-importing-images/
if (block.Video!.File) {
  try {
    const dir = "/media/" + url!.pathname.split("/").slice(-2)[0];
    const videoName = decodeURIComponent(url!.pathname.split("/").slice(-1)[0]);
    videoExtension = videoName.split(".")[1];
    const videoNameWithSlug = modifyFileName(videoName, {});
    video = `${dir}/${videoNameWithSlug}`;
  } catch (error) {
    console.log("Error while getting image for astro component:" + error);
  }
}

function getFirstLine(text: string) {
  const lines = text.split(/\n/);
  if (!lines.length) {
    return "";
  }
  return lines[0];
}

let altText: string;
if (block.Image && block.Image.Caption[0]) {
  altText = getFirstLine(block.Image?.Caption[0].Text!.Content);
} else {
  altText = block.Type;
}
---

{
  block.Video?.External && (
    <div class="aspect-h-9 aspect-w-16 w-full">
      {isYouTubeURL(url!) && (
        <iframe
          src={`https://www.youtube.com/embed/${parseYouTubeVideoId(url!)}`}
          width="100%"
          title="YouTube video player"
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share;"
          allowfullscreen
          class="h-full w-full rounded-lg"
        />
      )}
      <Caption richTexts={block.Video!.Caption} />
    </div>
  )
}
{
  block.Video?.File && (
    <div class="w-full justify-center pb-6">
      <video title={altText} class="w-full rounded-lg" preload="auto" controls>
        <source src={video} type={"video/" + videoExtension!} />
        Your browser does not support the video tag.
      </video>
      <Caption richTexts={block.Video!.Caption} />
    </div>
  )
}
<style>
  iframe {
    border: 0px;
  }
</style>
